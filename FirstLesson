# 数据库基本知识

# 数据库的基本定义 #
ep : 数据库就SQL的角度来看，数据库是一个以某种有组织的方式存储的数据集合，最简单的办法是将数据库想象成一个以某种有组织的方式存储的数据集合。
最简单的办法试将数据库想象成一个文件柜。这个文件柜是一个存放数据的物理位置，不管数据是什么，也不管数据是如何组织的。

数据库真正的定义： 保存有组织的数据的容器（通常是一个文件或一组文件）
# 关系型数据库 #

# 二维表 #
ep : 当往文件柜里放资料的时候，并不是随便将它们扔进某个抽屉就完事了，而是在文件柜红创建文件，然后将相关的资料放入特定的文件中。

在数据库领域中，这种文件称为表。表示一种结构化的文件，可以用来存储某种特定类型的数据。表可以保存顾客清单、产品目录，或者其他信息清单。
表的真正定义： 某种特定类型数据的结构化清单。

注意：
这一点的关键在于，存储在表中的数据是同一中类型的数据或清单。
绝不应该将顾客的清单与订单的清单存储在同一个数据库表中，否则以后的检索和访问会很困难。
数据库中的每个表都有一个名字来标识自己。这个名字是唯一的，即数据库中没有其他表具有相同的名字。

表名：使表名成为唯一的，实际上是数据库名和表名等的组合。有的数据库还使用数据库拥有者的名字作为唯一名的一部分。也就是说，虽然在相同数据库中不能两次使用相同的表名，但在不同的数据库中完全可以使用相同的表名。

注意： 表具有一些特性，这些特性定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。描述表的这组信息就是所谓的模式（schema），模式可以用来描述数据库中特定的表，也可以用来描述整个数据库（和其中表的关系）。



# 行 #
ep：表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。
定义 ： 表中的一个记录。

# 列 # 
ep : 表由列组成。列存储表中某部分的信息。
定义 ： 表中的一个字段，所有表都是由一个或者多个列组成的。

数据库中每个列都有相应的数据类型。数据类型（datatype）定义了列可
以存储哪些数据种类。例如，如果列中存储的是数字（或许是订单中的
物品数），则相应的数据类型应该为数值类型。如果列中存储的是日期、
文本、注释、金额等，则应该规定好恰当的数据类型。

另注： 数据类型
数据类型 ：所允许的数据的类型。每个表列都有相应的数据类型，它限制（或允许）该列中存储的数据。

注意： 数据类型限定了可存储在列中的数据种类（例如，防止在数值字段中录入字符值）。数据类型还帮助正确地分类数据，并在优化磁盘使用方面起重要的作用。因此，在创建表时必须特别关注所用的数据类型。

# 主键 #
ep： 表中每一行都应该有一列（或几列）可以唯一标识自己。例如顾客表可以使用顾客编号，而订单表可以使用订单ID。

定义： 一列（或一组列），其值能够唯一标识表中每一行。

注释：唯一标识表中每行的这个列（或这几列）称为主键。主键用来表示一个特定的行。没有主键，更新或删除表中特定行就极为困难，因为你不能保证操作只涉及相关的行。

注意：表中的任何列都可以作为主键，只要它满足以下条件。
0.任何两行都不具备相同的主键值；
1.每一行都必须具有一个主键值；
2.主键的列中的值不允许修改或者更新。
3.主键值不能重用（如果某行从表中删除，他的主键不能赋给以后的新行）

ps：主键通常定义在表的一列上，但并不是必需这么做，也可以一起使用多个列作为主键。在使用多列作为主键时，上述条件必须应用到所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）。


# 外键 #
定义：如果一张表中有一个非主键的字段指向了别一张表中的主键，就将该字段叫做外键。

注意：外键的默认作用有两点
0.对子表(外键所在的表)的作用：子表在进行写操作的时候，如果外键字段在父表中找不到对应的匹配，操作就会失败。
1.对父表的作用：对父表的主键字段进行删和改时，如果对应的主键在子表中被引用，操作就会失败。


# MySQL数据库管理系统
# 数据库 #
MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。

MySQL中，数据库的操作基本有：创建，查看，选择，以及删除4种。

创建数据库：CREATE DATABASE database_name;，后面的database_name是你要创建的数据库的名称；
查看数据库：SHOW DATABASES;，查看已经创建的所有数据库
选择数据库：USE database_name;，选择名为database_name的数据库，很多数据库的操作都需要先选中一个数据库，再执行进一步的操作；
删除数据库：DROP DATABASE database_name;，删除名为database_name的数据库；

# 数据表 #

数据表操作：
1.创建表
步骤： 
a. 先进入某一个数据库 
b. 输入建表的命令

2.查看表结构和删除表
a.查看表目录：SHOW TABLES;
b.查看表结构： DESC table_name;
c.查看DDL语句：SHOW CREATE TABLE table_name;
d.删除表：DROP TABLE table_name;

3.表的约束：表的约束(针对于某一列):
a.非空约束：NOT NULL(NK)，不允许某列的内容为空。
b.设置列的默认值：DEFAULT。
c.唯一约束：UNIQUE(UK)，在该表中，该列的内容必须唯一。
d.主键约束：PRIMARY KEY(PK)， 非空且唯一。
e.主键自增长：AUTO_INCREMENT，从1开始，步长为1。(MySQL特有)
f.外键约束：FOREIGN KEY(FK)，A表中的外键列的值必须参照于B表中的某一列(B表主键)。


# 视图 #

定义：视图是指计算机数据库中的视图，是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。
关系型数据库中的数据是由一张一张的二维关系表所组成，简单的单表查询只需要遍历一个表，而复杂的多表查询需要将多个表连接起来进行查询任务。对于复杂的查询事件，每次查询都需
要编写MySQL代码效率低下。为了解决这个问题，数据库提供了视图（view）功能。


# 存储过程 #
SQL语句需要先编译然后执行，而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。

存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。当想要在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。
